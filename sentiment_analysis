
import nltk
from nltk import word_tokenize
import random
import pickle 

short_pos = open("positive.txt", "r", encoding='latin2').read()
short_neg = open("negative.txt", "r", encoding='latin2').read()

#documents 는 (단어, pos/neg) 로 태그된 리스트, all_words 는 (단어, 문법/품사) 로 태그된 리스트

documents=[]
for r in short_pos.split('\n'):
    documents.append( (r, "pos"))
for r in short_neg.split('\n'):
    documents.append( (r, "neg"))
    
saving = open("documents.pickle", "wb")
pickle.dump(documents, saving)
saving.close()

all_words = []
short_pos_words = word_tokenize(short_pos)
short_neg_words = word_tokenize(short_neg)

for w in short_pos_words:
    all_words.append(w.lower())
for w in short_neg_words:
    all_words.append(w.lower())
    
all_words = nltk.FreqDist(all_words)
#all_words 를 frequent dict 로 변화시킴
word_features = list(all_words.keys())[:5000]

saving = open("word_features.pickle", "wb")
pickle.dump(word_features, saving)
saving.close()


def find_features(document):
    words = word_tokenize(document)
    features = {}
    for w in word_features:
        features[w] = (w in words)  #boolean : is w IN words(set) or not?
    return features
        
featuresets = [ (find_features(rev), category) for (rev, category) in documents]
random.shuffle(featuresets)
training_set = featuresets[:10000]
testing_set = featuresets[10000:]

from nltk.classify.scikitlearn import SklearnClassifier
from sklearn.naive_bayes import MultinomialNB, BernoulliNB
from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC
from nltk.classify import ClassifierI
from statistics import mode

class VoteClassifier(ClassifierI):
    def __init__(self, *classifiers):
        self._classifiers = classifiers

    def classify(self, features):
        votes = []
        for c in self._classifiers:
            v = c.classify(features)
            votes.append(v)
        return mode(votes)

    def confidence(self, features):
        votes = []
        for c in self._classifiers:
            v = c.classify(features)
            votes.append(v)

        choice_votes = votes.count(mode(votes))
        conf = choice_votes / len(votes)
        return conf
        
NB_classifier = nltk.NaiveBayesClassifier.train(training_set)
print("Original Naive Bayes Algo accuracy percent:", (nltk.classify.accuracy(NB_classifier, testing_set))*100)
NB_classifier.show_most_informative_features(15)


MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)
print("MNB_classifier accuracy percent:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

BernoulliNB_classifier = SklearnClassifier(BernoulliNB())
BernoulliNB_classifier.train(training_set)
print("BernoulliNB_classifier accuracy percent:", (nltk.classify.accuracy(BernoulliNB_classifier, testing_set))*100)

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier accuracy percent:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)
print("SGDClassifier_classifier accuracy percent:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)

SVC_classifier = SklearnClassifier(SVC())
SVC_classifier.train(training_set)
print("SVC_classifier accuracy percent:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)

LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier accuracy percent:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

NuSVC_classifier = SklearnClassifier(NuSVC())
NuSVC_classifier.train(training_set)
print("NuSVC_classifier accuracy percent:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)


voted_classifier = VoteClassifier(
                                  NuSVC_classifier,
                                  LinearSVC_classifier,
                                  MNB_classifier,
                                  BernoulliNB_classifier,
                                  LogisticRegression_classifier)

print("voted_classifier accuracy percent:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

#Pickling: To create Modules
saving = open("basic.pickle", "wb")
pickle.dump(classifier,saving)
saving.close()

saving = open("MNB.pickle", "wb")
pickle.dump(MNB_classifier,saving)
saving.close()

saving = open("Bernoulli.pickle", "wb")
pickle.dump(BernoulliNB_classifier, saving)
saving.close()

saving = open("SGD.pickle", "wb")
pickle.dump(SGDClassifier_classifier, saving)
saving.close()

saving = open("LinearSVC.pickle", "wb")
pickle.dump(LinearSVC_classifier, saving)
saving.close()

saving = open("NuSVC.pickle", "wb")
pickle.dump(NuSVC_classifier, saving)
saving.close()
